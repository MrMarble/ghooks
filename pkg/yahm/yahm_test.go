package yahm_test

import (
	"bytes"
	"testing"

	"github.com/mrmarble/yahm/pkg/yahm"
	"github.com/stretchr/testify/assert"
)

func TestNewHook(t *testing.T) {
	h := yahm.NewHook(yahm.PreCommit)

	assert.EqualValues(t, yahm.PreCommit, h.Type)
}

func TestAddAction(t *testing.T) {
	h := yahm.NewHook(yahm.PreCommit)

	h.AddAction("test", "echo test")

	assert.EqualValues(t, 1, len(h.Actions))
}

func TestWriteHook(t *testing.T) {
	h := yahm.NewHook(yahm.PreCommit)
	h.AddAction("test", "echo test")

	bf := bytes.Buffer{}
	err := yahm.WriteHook(&bf, h)
	if err != nil {
		t.Fatal(err)
	}

	assert.Greater(t, bf.Len(), 0)
	assert.Contains(t, bf.String(), `# action_start
# Name: test
echo test
# action_end`)
}

func TestParseHook(t *testing.T) {
	str := `#!/usr/bin/env bash
# File generated by yahm: https://github.com/mrmarble/yahm
# At: 01-02-2006

# action_start
# Name: test
echo test
# action_end`

	h, err := yahm.ParseHook(yahm.PreCommit, str)
	if err != nil {
		t.Fatal(err)
	}
	assert.NotNil(t, h)
	assert.Equal(t, yahm.PreCommit, h.Type)
	assert.Len(t, h.Actions, 1)
	assert.Equal(t, "test", h.Actions[0].Name)
	assert.Equal(t, "echo test", h.Actions[0].Cmd)
}
