on: 
  pull_request:
    branches: [ master ]
name: Lint
jobs:
  test:
    strategy:
      matrix:
        go-version: [1.15.x, 1.16.x]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}

    - name: Checkout code
      uses: actions/checkout@v2
      
    - uses: actions/cache@v2
      with:
        # In order:
        # * Module download cache
        # * Build cache (Linux)
        # * Build cache (Mac)
        # * Build cache (Windows)
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
          ~/Library/Caches/go-build
          %LocalAppData%\go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install tools
      run: go get -u golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow golang.org/x/lint/golint honnef.co/go/tools/cmd/staticcheck github.com/kisielk/errcheck github.com/securego/gosec/cmd/gosec

    - name: Get Go dependencies
      run: go get

    - name: Run gofmt
      if: always()
      run: |
        golintout="$(gofmt -s -l .)";
        if [ -n "$golintout" ]; then
          awk '{ print $0": format check failed" }' <<< $golintout
          exit 1
        fi
      shell: bash

    - name: Run go vet
      if: always()
      run: go vet

    - name: Run go vet -vettool shadow
      if: always()
      run: go vet -vettool $(which shadow)

    - name: Run golint
      if: always()
      run: golint -set_exit_status ./...

    - name: Run staticcheck
      if: always()
      run: staticcheck ./...

    - name: Run errcheck
      if: always()
      run: errcheck ./...

    - name: Run gosec
      if: always()
      run: gosec -quiet -fmt=golint ./...
        
    - name: Build
      run: go build -v ./...
      
    - name: Test
      run: go test -v /... -cover
